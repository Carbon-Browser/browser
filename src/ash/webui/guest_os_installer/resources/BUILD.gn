# Copyright 2022 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/chromeos/ui_mode.gni")
import("//tools/polymer/html_to_wrapper.gni")
import("//tools/typescript/ts_library.gni")
import("//ui/webui/resources/tools/generate_grd.gni")

assert(is_chromeos_ash)

# Files holding a Polymer element definition AND have an equivalent .html file.
web_component_files = [ "app.ts" ]

# Files that are passed as input to html_to_wrapper().
html_files = []
foreach(f, web_component_files) {
  html_files += [ string_replace(f, ".ts", ".html") ]
}

# Files that are generated by html_to_wrapper().
html_wrapper_files = []
foreach(f, html_files) {
  html_wrapper_files += [ f + ".ts" ]
}

# Files that get passed through the Typescript compiler
ts_files = [ "browser_proxy.ts" ] + web_component_files

# Static files that can be included in the resources pack as-is
static_resource_files = [ "index.html" ]

# This is a relatively complicated build file, so let me try to
# explain things...

# Polymer components are made up of an HTML template and a Custom
# Element description in Typescript. For ease of development these are
# kept these in separate files, but at run-time the HTML template
# needs to be generated by the Typescript code. This build rule wraps
# the .html files into Typescript files containing a single function
# the returns the HTML template, which is then imported from and
# called by the corresponding .ts file.
html_to_wrapper("html_wrapper_files") {
  in_files = html_files
}

# Copy all files to be passed to the TS compiler to the some
# folder. Since files generated by html_to_wrapper() are already in
# target_gen_dir, copy remaining files here as well. The mojom file is
# included because the mojo bindings generator currently doesn't
# handle Typescript, see crbug.com/1002798.
copy("copy_ts") {
  sources = [ "$root_gen_dir/mojom-webui/ash/webui/guest_os_installer/mojom/guest_os_installer.mojom-webui.js" ] + ts_files
  outputs = [ "$target_gen_dir/{{source_file_part}}" ]
  deps = [ "../mojom:mojom_webui_js" ]
}

# Run the Typescript compiler, putting the outputs in
# $target_gen_dir/tsc. This has to be a different directory to the inputs
# because the mojom file has the same name in both input and output,
# and they'd conflict otherwise.
ts_library("build_ts") {
  root_dir = target_gen_dir
  out_dir = "$target_gen_dir/tsc"
  in_files =
      ts_files + html_wrapper_files + [ "guest_os_installer.mojom-webui.js" ]

  # Allow javascript files in input
  tsconfig_base = "tsconfig_base.json"

  # Dependencies that are Typescript libraries i.e. ts_library() targets
  deps = [ "//ui/webui/resources:library" ]

  # Dependencies that are not ts_library() targets
  extra_deps = [
    ":copy_ts",
    ":html_wrapper_files",
  ]
}

# Generate the grd file. This is done using a "manifest" file
# generated by :build_ts, and from the static assets listed in
# static_resource_files. This is pulled in
# by //ash/webui/resources:guest_os_installer_resources, which is in
# turn pulled in by //chrome/chrome_paks.gni (to add the resources to
# the final resource pack), by //ash/webui/guest_os_installer to add
# them to the WebUI context, and by anyone else who needs to use these
# resources.
generate_grd("build_grd") {
  input_files = static_resource_files
  input_files_base_dir = rebase_path(".", "//")

  deps = [ ":build_ts" ]
  manifest_files =
      filter_include(get_target_outputs(":build_ts"), [ "*.manifest" ])

  grd_prefix = "ash_guest_os_installer"
  out_grd = "$target_gen_dir/${grd_prefix}_resources.grd"
}
