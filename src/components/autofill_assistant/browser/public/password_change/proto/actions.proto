// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto2";

option optimize_for = LITE_RUNTIME;
option java_package = "org.chromium.chrome.browser.autofill_assistant.password_change.proto";
option java_multiple_files = true;

package autofill_assistant.password_change;

enum TopIcon {
  TOP_ICON_UNSPECIFIED = 0;

  TOP_ICON_OPEN_SITE_SETTINGS = 1;
  TOP_ICON_ENTER_OLD_PASSWORD = 2;
  TOP_ICON_CHOOSE_NEW_PASSWORD = 3;
  TOP_ICON_SAVE_NEW_PASSWORD = 4;
  TOP_ICON_CHANGED_PASSWORD = 5;

  TOP_ICON_BAD_NEW_PASSWORD = 6;
  TOP_ICON_ERROR_OCCURRED = 7;
  TOP_ICON_USER_ACTION_REQUIRED = 8;
}

enum ProgressStep {
  PROGRESS_STEP_UNSPECIFIED = 0;

  PROGRESS_STEP_START = 1;
  PROGRESS_STEP_CHANGE_PASSWORD = 2;
  PROGRESS_STEP_SAVE_PASSWORD = 3;
  PROGRESS_STEP_END = 4;
}

// Represents a choice in a prompt-type action.
message Choice {
  // The text shown on the chip/button.
  optional string text = 1;

  // Tag that identifies a choice - will be returned as a result if this
  // choice is selected.
  optional string tag = 2;

  // Whether the button is highlighted.
  optional bool highlighted = 3;

  // TODO(crbug.com/1331202): Add fields for select / enable on DOM condition.
}

// Prompts the user with a title and multiple choices.
message BasePromptSpecification {
  // The result key. If it is not set, no result payload needs to be sent to
  // the server. This can happen if there is either only one prompt choice
  // or if none of the prompt choices have any steps associated with them. In
  // that case, one return trip is saved.
  optional string output_key = 1;

  // The title of the prompt.
  optional string title = 2;

  // List of available choices in a prompt.
  repeated Choice choices = 3;

  // Result message for the base prompt.
  message Result {
    // The tag corresponding to the selected `Choice`.
    optional string selected_tag = 1;
  }
}

// Prompts the user to accept a generated password and shows that password
// to the user.
message UseGeneratedPasswordPromptSpecification {
  // Reserved value for the return key.
  reserved 1;

  // The title of the prompt.
  optional string title = 2;

  // The description of the prompt.
  optional string description = 3;

  // The choice for a manually selected password.
  optional Choice manual_password_choice = 4;

  // The choice for the generated password.
  optional Choice generated_password_choice = 5;

  // Result message for the generated password prompt.
  message Result {
    // Indicates whether the user accepted the generated password.
    optional bool generated_password_accepted = 1;
  }
}

// Updates the side panel rendered in desktop during APC runs.
message UpdateSidePanelSpecification {
  // Icon rendered on top of the side panel.
  optional TopIcon top_icon = 1;

  // The title message shown to the user.
  optional string title = 2;

  // The description message shown to the user.
  optional string description = 3;

  // The current password change flow step.
  optional ProgressStep progress_step = 4;
}

// A wrapper around all available `password_change` specifications.
message GenericPasswordChangeSpecification {
  oneof specification {
    BasePromptSpecification base_prompt = 1;
    UseGeneratedPasswordPromptSpecification use_generated_password_prompt = 2;
    UpdateSidePanelSpecification update_side_panel = 3;
  }
}

// A wrapper around all available `password_change` specifications result.
message GenericPasswordChangeSpecificationResult {
  oneof result {
    BasePromptSpecification.Result base_prompt_result = 1;
    UseGeneratedPasswordPromptSpecification.Result
        use_generated_password_prompt_result = 2;
  }
}
