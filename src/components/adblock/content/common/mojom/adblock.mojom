/*
 * This file is part of eyeo Chromium SDK,
 * Copyright (C) 2006-present eyeo GmbH
 *
 * eyeo Chromium SDK is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * eyeo Chromium SDK is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
 */

module adblock.mojom;

import "services/network/public/mojom/network_param.mojom";
import "services/network/public/mojom/parsed_headers.mojom";
import "url/mojom/url.mojom";

enum FilterMatchResult {
  kNoRule,
  kBlockRule,
  kAllowRule,
  kDisabled
};

interface AdblockInterface {
  // Checks whether the resource described via URL and type, and embedded within
  // a given frame, is blocked by a filter. Frame is needed to analyze the frame
  // hierarchy, as parent frames may be affected by additional allowing filters.
  CheckFilterMatch(
      url.mojom.Url url,
      int32 resource_type,
      int32 render_frame_id)
      => (FilterMatchResult result);

  // Processes response headers in order to:
  // - Block request, if header filter applies
  // - Extract sitekey header, if present
  // - Modify response headers, if necessary
  // If headers are modified, parsed headers are returned as parsed_headers. Parsed
  // headers must match raw headers for the network stack to remain consistent.
  // If headers were not modified, null is returned.
  ProcessResponseHeaders(
      url.mojom.Url url,
      int32 render_frame_id,
      network.mojom.HttpResponseHeaders headers,
      string user_agent) => (FilterMatchResult result, network.mojom.ParsedHeaders? parsed_headers);

  // Check whether url should be redirected by rewrite filter
  CheckRewriteFilterMatch(
      url.mojom.Url url,
      int32 render_frame_id) => (url.mojom.Url? result);

  Clone(pending_receiver<AdblockInterface> receiver);
};
