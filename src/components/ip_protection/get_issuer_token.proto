// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package ip_protection;

message GetIssuerTokenRequest {
  enum ServiceType {
    SERVICE_TYPE_UNSPECIFIED = 0;
    CHROME = 1;
  }
  optional ServiceType service_type = 1;
}

// Response to get issuer tokens.
message GetIssuerTokenResponse {
  // A single issuer token
  message IssuerToken {
    // Version 1 indicates curve secp224r1.
    // Chrome verifies version is 1 and complains if not.
    optional int32 version = 1;
    // Elliptic curve point stored in compressed form, for version 1 size must
    // be 29.
    optional bytes u = 2;
    // Elliptic curve point stored in compressed form, for version 1 size must
    // be 29.
    optional bytes e = 3;
  }

  // Stores a public key for curve secp224r1.
  message PublicKey {
    // Elliptic curve point stored in compressed form, for version 1 size must
    // be 29.
    optional bytes y = 1;
  }

  repeated IssuerToken tokens = 1;

  optional PublicKey public_key = 2;

  // In seconds since unix epoch, tokens are invalid past this expiration time.
  optional uint64 expiration_time_seconds = 3;

  // In seconds since unix epoch. After this, chrome can ask
  // tokens with a later expiration time.
  optional uint64 next_epoch_start_time_seconds = 4;

  // The token reveal probability is defined as (p_reveal / 10000).
  optional int32 p_reveal = 5;
}
