This is a testharness.js-based test.
Found 60 FAIL, 0 TIMEOUT, 0 NOTRUN.
[FAIL] In <input type="text">, execCommand("cut", false, null), a[b]c): The command should be enabled
  assert_equals: expected true but got false
[FAIL] In <input type="text">, execCommand("cut", false, null), a[b]c): execCommand() should return true
  assert_equals: expected true but got false
[FAIL] In <input type="text">, execCommand("cut", false, null), a[b]c): <input>.value should be "a[]c"
  assert_equals: expected "a[]c" but got "a[b]c"
[FAIL] In <input type="text">, execCommand("cut", false, null), a[b]c): input.inputType should be deleteByCut
  assert_equals: expected (string) "deleteByCut" but got (undefined) undefined
[FAIL] In <input type="text">, execCommand("cut", false, null), a[b]c): input.target should be [object HTMLInputElement]
  assert_equals: expected (object) Element node <input id="target" type="text"></input> but got (undefined) undefined
[FAIL] In <input type="text">, execCommand("copy", false, null), a[bc]d): The command should be enabled
  assert_equals: expected true but got false
[FAIL] In <input type="text">, execCommand("copy", false, null), a[bc]d): execCommand() should return true
  assert_equals: expected true but got false
[FAIL] In <input type="text">, execCommand("paste", false, null), a[]c): The command should be supported
  assert_equals: expected true but got false
[FAIL] In <input type="text">, execCommand("paste", false, null), a[]c): The command should be enabled
  assert_equals: expected true but got false
[FAIL] In <input type="text">, execCommand("undo", false, null), [a]bc): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("undo", false, null), [a]bc): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("undo", false, null), [a]bc): input.inputType should be undefined
  assert_equals: expected (undefined) undefined but got (string) "historyUndo"
[FAIL] In <input type="text">, execCommand("undo", false, null), [a]bc): input.target should be undefined
  assert_equals: expected (undefined) undefined but got (object) Element node <input id="target" type="text"></input>
[FAIL] In <input type="text">, execCommand("redo", false, null), [a]bc): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("redo", false, null), [a]bc): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("redo", false, null), [a]bc): input.inputType should be undefined
  assert_equals: expected (undefined) undefined but got (string) "historyRedo"
[FAIL] In <input type="text">, execCommand("redo", false, null), [a]bc): input.target should be undefined
  assert_equals: expected (undefined) undefined but got (object) Element node <input id="target" type="text"></input>
[FAIL] In <input type="text">, execCommand("redo", false, null), a[b]c): The command should be enabled
  assert_equals: expected true but got false
[FAIL] In <input type="text">, execCommand("removeformat", false, null), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("removeformat", false, null), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("insertparagraph", false, null), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("insertparagraph", false, null), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("insertlinebreak", false, null), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("insertlinebreak", false, null), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("styleWithCSS", false, true), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("styleWithCSS", false, true), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("styleWithCSS", false, true), a[b]c): styleWithCSS state should be false when <input> has focus
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("styleWithCSS", false, true), a[b]c): styleWithCSS state should be false when <input> does not have focus
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("styleWithCSS", false, false), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("styleWithCSS", false, false), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("defaultParagraphSeparator", false, p), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("defaultParagraphSeparator", false, p), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("defaultParagraphSeparator", false, p), a[b]c): defaultParagraphSeparator value should be "p" when <input> has focus
  assert_equals: expected "div" but got "p"
[FAIL] In <input type="text">, execCommand("defaultParagraphSeparator", false, p), a[b]c): defaultParagraphSeparator value should be "p" when <input> does not have focus
  assert_equals: expected "div" but got "p"
[FAIL] In <input type="text">, execCommand("defaultParagraphSeparator", false, div), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text">, execCommand("defaultParagraphSeparator", false, div), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text"> in contenteditable, execCommand("cut", false, null), a[b]c): The command should be enabled
  assert_equals: expected true but got false
[FAIL] In <input type="text"> in contenteditable, execCommand("cut", false, null), a[b]c): execCommand() should return true
  assert_equals: expected true but got false
[FAIL] In <input type="text"> in contenteditable, execCommand("cut", false, null), a[b]c): <input>.value should be "a[]c"
  assert_equals: expected "a[]c" but got "a[b]c"
[FAIL] In <input type="text"> in contenteditable, execCommand("cut", false, null), a[b]c): input.inputType should be deleteByCut
  assert_equals: expected (string) "deleteByCut" but got (undefined) undefined
[FAIL] In <input type="text"> in contenteditable, execCommand("cut", false, null), a[b]c): input.target should be [object HTMLInputElement]
  assert_equals: expected (object) Element node <input id="target" type="text"></input> but got (undefined) undefined
[FAIL] In <input type="text"> in contenteditable, execCommand("copy", false, null), a[bc]d): The command should be enabled
  assert_equals: expected true but got false
[FAIL] In <input type="text"> in contenteditable, execCommand("copy", false, null), a[bc]d): execCommand() should return true
  assert_equals: expected true but got false
[FAIL] In <input type="text"> in contenteditable, execCommand("paste", false, null), a[]c): The command should be supported
  assert_equals: expected true but got false
[FAIL] In <input type="text"> in contenteditable, execCommand("paste", false, null), a[]c): The command should be enabled
  assert_equals: expected true but got false
[FAIL] In <input type="text"> in contenteditable, execCommand("undo", false, null), [a]bc): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text"> in contenteditable, execCommand("undo", false, null), [a]bc): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text"> in contenteditable, execCommand("undo", false, null), [a]bc): input.inputType should be undefined
  assert_equals: expected (undefined) undefined but got (string) "historyUndo"
[FAIL] In <input type="text"> in contenteditable, execCommand("undo", false, null), [a]bc): input.target should be undefined
  assert_equals: expected (undefined) undefined but got (object) Element node <input id="target" type="text"></input>
[FAIL] In <input type="text"> in contenteditable, execCommand("redo", false, null), [a]bc): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text"> in contenteditable, execCommand("redo", false, null), [a]bc): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text"> in contenteditable, execCommand("redo", false, null), [a]bc): input.inputType should be undefined
  assert_equals: expected (undefined) undefined but got (string) "historyRedo"
[FAIL] In <input type="text"> in contenteditable, execCommand("redo", false, null), [a]bc): input.target should be undefined
  assert_equals: expected (undefined) undefined but got (object) Element node <input id="target" type="text"></input>
[FAIL] In <input type="text"> in contenteditable, execCommand("redo", false, null), a[b]c): The command should be enabled
  assert_equals: expected true but got false
[FAIL] In <input type="text"> in contenteditable, execCommand("removeformat", false, null), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text"> in contenteditable, execCommand("removeformat", false, null), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text"> in contenteditable, execCommand("insertparagraph", false, null), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text"> in contenteditable, execCommand("insertparagraph", false, null), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <input type="text"> in contenteditable, execCommand("insertlinebreak", false, null), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <input type="text"> in contenteditable, execCommand("insertlinebreak", false, null), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
Harness: the test ran to completion.
