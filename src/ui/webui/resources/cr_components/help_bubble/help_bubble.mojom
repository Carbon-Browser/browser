// Copyright 2022 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module help_bubble.mojom;

// Contains IPC calls that allow the HelpBubbleFactory system to connect to
// the HelpBubbleMixin and HelpBubbleElement component.
//
// The calls here allow User Education systems that use the HelpBubble
// architecture to display help bubbles in WebUI surfaces (including pages like
// Settings and secondary UI elements such as the Sidebar).
//
// Systems expected to use this IPC include FeaturePromo and Tutorials. For
// more detailed usage information, see README.md.

// Where the help bubble floats relative to its anchor.
enum HelpBubblePosition {
  ABOVE,
  BELOW,
  LEFT,
  RIGHT
};

// Simplified version of user_education::HelpBubbleButtonParams.
struct HelpBubbleButtonParams {
  string text;
  bool is_default = false;
};

// Simplified version of user_education::HelpBubbleParams.
struct HelpBubbleParams {
  // Holds the name of the ElementIdentifier used to identify the help bubble's
  // anchor in C++ code. The HelpBubbleMixin then maps this to a specific HTML
  // element ID.
  string native_identifier;

  HelpBubblePosition position = HelpBubblePosition.BELOW;
  string? title_text;
  string body_text;
  string close_button_alt_text;
  array<HelpBubbleButtonParams> buttons;
};

// Used by the controller to bootstrap IPC. Any WebUIController can implement
// this interface to use help bubbles; see README.md for more information.
interface HelpBubbleHandlerFactory {
  // This method is called on bootstrap to create the browser-side handler.
  CreateHelpBubbleHandler(
           pending_remote<HelpBubbleClient> client,
           pending_receiver<HelpBubbleHandler> handler);
};

// Object which handles the C++/browser side of help bubble management for a
// WebUIController.
//
// Help bubbles are anchored to specific elements in the UI, identified by
// ui::ElementIdentifiers. The HelpBubbleMixin maps this to an HTML id within
// its component.
//
// We always use the name of the ElementIdentifier (`native_identifier`) when
// showing a help bubble or when communicating events back to the handler on the
// browser side, because HTML ids can be ambiguous within a document with shadow
// DOMs.
interface HelpBubbleHandler {
  // Indicates that the visibility of the element that the help bubble could be
  // anchored to has changed.
  HelpBubbleAnchorVisibilityChanged(string native_identifier, bool visible);

  // Notifies that a button on the help bubble anchored to `native_identifier`
  // has been pressed and the help bubble is closing as a result. The
  // `buttonIndex` parameter will be set to the (0-indexed) index of the button
  // as it was specified in the `HelpBubbleParams.buttons` used to show the help
  // bubble.
  HelpBubbleButtonPressed(string native_identifier, uint8 button_index);

  // Called when the help bubble anchored to `native_identifier` is closed,
  // either because the element it is associated with goes away, or because the
  // user canceled it (e.g. pressed the [x] button).
  HelpBubbleClosed(string native_identifier, bool by_user);
};

// Represents WebUI component that can display help bubbles. The implementing UI
// should use a HelpBubbleMixin; see README.md for detailed instructions.
interface HelpBubbleClient {
  // Shows a help bubble with parameters defined by `params` attached to
  // `target`.
  ShowHelpBubble(HelpBubbleParams params);

  // Toggles focus to the help bubble anchored to `native_identifier` or to its
  // anchor element.
  ToggleFocusForAccessibility(string native_identifier);

  // Invoked to hide the help bubble anchored to `native_identifier` if it
  // should no longer be shown.
  HideHelpBubble(string native_identifier);
};
