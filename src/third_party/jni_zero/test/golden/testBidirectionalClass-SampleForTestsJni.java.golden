//
// This file was generated by //third_party/jni_zero/jni_zero.py
//
package org.jni_zero;

import android.graphics.Rect;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.jni_zero.CheckDiscard;
import org.jni_zero.GEN_JNI;
import org.jni_zero.JniTestInstanceHolder;
import org.jni_zero.NativeLibraryLoadedStatus;
import org.jni_zero.SampleForTests;
import org.jni_zero.SampleUnderSamePackage;
import org.jni_zero.internal.NullUnmarked;
import org.jni_zero.internal.Nullable;

@CheckDiscard("crbug.com/993421")
@NullUnmarked
public class SampleForTestsJni implements SampleForTests.Natives {
  private static @Nullable JniTestInstanceHolder sOverride;

  public static SampleForTests.Natives get() {
    JniTestInstanceHolder holder = sOverride;
    if (holder != null && holder.value != null) {
      return (SampleForTests.Natives) holder.value;
    }
    NativeLibraryLoadedStatus.checkLoaded();
    return new SampleForTestsJni();
  }

  public static void setInstanceForTesting(SampleForTests.Natives impl) {
    if (sOverride == null) {
      sOverride = JniTestInstanceHolder.create();
    }
    sOverride.value = impl;
  }


  @Override
  public void addStructB(long nativeCPPClass, SampleForTests caller, SampleForTests.InnerStructB b) {
    assert nativeCPPClass != 0;
    assert caller != null;
    assert b != null;
    GEN_JNI.org_jni_1zero_SampleForTests_addStructB(nativeCPPClass, caller, b);
  }

  @Override
  public void classUnderSamePackageTest(SampleUnderSamePackage arg) {
    assert arg != null;
    GEN_JNI.org_jni_1zero_SampleForTests_classUnderSamePackageTest(arg);
  }

  @Override
  public void destroy(long nativeCPPClass, SampleForTests caller, byte[] bytes) {
    assert nativeCPPClass != 0;
    assert caller != null;
    assert bytes != null;
    GEN_JNI.org_jni_1zero_SampleForTests_destroy(nativeCPPClass, caller, bytes);
  }

  @Override
  public Class getClass(Class env) {
    assert env != null;
    return (Class) GEN_JNI.org_jni_1zero_SampleForTests_getClass(env);
  }

  @Override
  public double getDoubleFunction(SampleForTests ret) {
    assert ret != null;
    return (double) GEN_JNI.org_jni_1zero_SampleForTests_getDoubleFunction(ret);
  }

  @Override
  public float getFloatFunction() {
    return (float) GEN_JNI.org_jni_1zero_SampleForTests_getFloatFunction();
  }

  @Override
  public Object getNonPODDatatype(SampleForTests jcaller) {
    assert jcaller != null;
    return (Object) GEN_JNI.org_jni_1zero_SampleForTests_getNonPODDatatype(jcaller);
  }

  @Override
  public Throwable getThrowable(Throwable arg0) {
    assert arg0 != null;
    return (Throwable) GEN_JNI.org_jni_1zero_SampleForTests_getThrowable(arg0);
  }

  @Override
  public long init(SampleForTests caller, String param, byte[] bytes, SampleForTests convertedType, SampleForTests[] nonConvertedArray) {
    assert caller != null;
    assert param != null;
    assert bytes != null;
    assert convertedType != null;
    assert nonConvertedArray != null;
    return (long) GEN_JNI.org_jni_1zero_SampleForTests_init(
        caller,
        param,
        bytes,
        convertedType,
        nonConvertedArray);
  }

  @Override
  public void iterateAndDoSomethingWithStructB(long nativeCPPClass, SampleForTests caller) {
    assert nativeCPPClass != 0;
    assert caller != null;
    GEN_JNI.org_jni_1zero_SampleForTests_iterateAndDoSomethingWithStructB(nativeCPPClass, caller);
  }

  @Override
  public List listTest2(Set items) {
    assert items != null;
    return (List) GEN_JNI.org_jni_1zero_SampleForTests_listTest2(items);
  }

  @Override
  public Map mapTest2(Map arg0) {
    assert arg0 != null;
    return (Map) GEN_JNI.org_jni_1zero_SampleForTests_mapTest2(arg0);
  }

  @Override
  public int method(long nativeCPPClass, SampleForTests caller, String[] strings) {
    assert nativeCPPClass != 0;
    assert caller != null;
    assert strings != null;
    return (int) GEN_JNI.org_jni_1zero_SampleForTests_method(nativeCPPClass, caller, strings);
  }

  @Override
  public double methodOtherP0(long nativePtr, SampleForTests caller) {
    assert nativePtr != 0;
    assert caller != null;
    return (double) GEN_JNI.org_jni_1zero_SampleForTests_methodOtherP0(nativePtr, caller);
  }

  @Override
  public boolean[] primitiveArrays(byte[] b, char[] c, short[] s, int[] i, long[] l, float[] f, double[] d) {
    assert b != null;
    assert c != null;
    assert s != null;
    assert i != null;
    assert l != null;
    assert f != null;
    assert d != null;
    return (boolean[]) GEN_JNI.org_jni_1zero_SampleForTests_primitiveArrays(b, c, s, i, l, f, d);
  }

  @Override
  public String returnAString(long nativeCPPClass, SampleForTests caller) {
    assert nativeCPPClass != 0;
    assert caller != null;
    return (String) GEN_JNI.org_jni_1zero_SampleForTests_returnAString(nativeCPPClass, caller);
  }

  @Override
  public void setNonPODDatatype(SampleForTests obj, Rect rect) {
    assert obj != null;
    assert rect != null;
    GEN_JNI.org_jni_1zero_SampleForTests_setNonPODDatatype(obj, rect);
  }
}
