// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module compose.mojom;

// Interface for setting up connection to allow calls between the compose dialog
// web page and native code.
interface ComposeSessionPageHandlerFactory {
  // Called from dialog compose JS to set up native handler.
  CreateComposeSessionPageHandler(
      pending_receiver<ComposeClientPageHandler> client_handler,
      pending_receiver<ComposeSessionPageHandler> handler,
      pending_remote<ComposeDialog> dialog);
};

// Configuration parameter used in compose requests.
enum Tone {
  kUnset,
  kFormal,
  kCasual,
};

// Configuration parameter used in compose requests.
enum Length {
  kUnset,
  kShorter,
  kLonger,
};

// Status code used in compose responses.
// These values are persisted to logs. Entries should not be renumbered and
// numeric values should never be reused. Keep in sync with
// ComposeResponseStatus in src/tools/metrics/histograms/enums.xml.
enum ComposeStatus {
  kOk = 0,
  // Generic error, not specified.
  kError = 1,
  // Request was unable to be processed.
  kNotSuccessful = 2,
  // Server may have not responded.
  kTryAgain = 3,
  // Server is likely overloaded, cannot handle a response right now.
  kTryAgainLater = 4,
  // If the feature is somehow disabled.
  kMisconfiguration = 5,
  // If permission is denied (e.g. user is not logged in.)
  kPermissionDenied = 6,
};

// Whether the user has consented to page content sharing and acknowledged this
// consent in compose.
enum ConsentState {
  // Consent has not been given
  kUnset,
  // Consent has been given but not acknowledged in compose
  kExternalConsented,
  // Consent has been given and acknowledged in compose
  kConsented,
};

// Configuration parameters used in rewrite requests, specifying how the
// response should be changed.
union StyleModifiers {
  Tone tone;
  Length length;
};

// The response to compose requests. `response_text` is only valid if `status`
// is kOk.
struct ComposeResponse {
  ComposeStatus status;
  string result;
  // Whether undo is possible to a prior state before this response.
  bool undo_available;
};

// Snapshot of state that can describe current state or be used to
// fully restore a previous state.
struct ComposeState {
  // TODO(crbug.com/1493364): Change this field to a type that's opaque and
  // non-trivial to use from untrustworthy processes.
  // State for the WebUI session. This should be considered opaque and is
  // unsafe to parse in the browser process.
  string webui_state;
  // Response from compose service. This is not present if the request
  // has not been completed. The response is present if the request has
  // completed, even if the response status is an error.
  ComposeResponse? response;
  // Whether a request is pending. False can also mean that the
  // request was not made.
  bool has_pending_request;
  // Whether the user has pressed the thumbs up/down feedback buttons.
  UserFeedback feedback;
};

// Parameters used to configure the WebUI. These params are passed from the
// browser to the WebUI as part of OpenMetadata when the dialog opens. The
// values may be configured through Finch.
struct ConfigurableParams {
  // Word and character limits on the text input for the request.
  int32 min_word_limit;
  int32 max_word_limit;
  int32 max_character_limit;
};

// Information needed by the WebUI to show a new or restored
// compose dialog.
struct OpenMetadata {
  ConsentState consent_state;
  // Renderer provided text selection.
  string initial_input;
  ComposeState compose_state;
  ConfigurableParams configurable_params;
};

// The trigger for dismissing the compose dialog.
enum CloseReason {
  // The X button on the upper-right of the consent/disclaimer dialog.
  kConsentCloseButton,
  // The page content consent was declined.
  kPageContentConsentDeclined,
  // The X button on the upper-right of the main app dialog.
  kCloseButton,
  // The Insert button of the dialog.
  kInsertButton,
};

//TODO(b/311697865) move this to a common location.
enum UserFeedback {
  // Unspecified.
  kUserFeedbackUnspecified,
  // A thumbs up.
  kUserFeedbackPositive,
  // A thumbs down.
  kUserFeedbackNegative,
};

// Interface for calls from Compose dialog JS into the Browser process.
interface ComposeSessionPageHandler {
  // Asks the Browser to compose `input`, informing the Browser if the compose
  // call was based on the user input being 'edited' in the dialog after the
  // initial compose response.
  Compose(string input, bool edited);

  // Asks the Browser to rewrite the last response. `style` specifies how the
  // response should be changed. A null `style` requests a rewrite without
  // changes to the tone or length.
  Rewrite(StyleModifiers? style);

  // Asks the native handler to store `webui_state` for the last field the user
  // selected compose on.
  // TODO(crbug.com/1493364): Change this field to a type that's opaque and
  // non-trivial to use from untrustworthy processes.
  // State for the WebUI session. This should be considered opaque and is
  // unsafe to parse in the browser process.
  SaveWebUIState(string webui_state);

  // Inform the Browser that the response has been accepted by the user.
  // Should only be called if the ComposeResponse received is valid.
  // Boolean success indicates if the result was accepted successfully.
  AcceptComposeResult() => (bool success);

  // Asks the native handler for state information needed for opening the
  // compose dialog for the last field the user selected compose on.
  RequestInitialState() => (OpenMetadata initial_state);

  // Asks the native handler to return the `last_state`. A null return means
  // that there are no undoable states remaining. Calling `Undo()` and
  // simultaneously closing the dialog (i.e., disconnecting the IPC pipe) may
  // result in the state being undone, or remaining the same. This depends on
  // which action executes first. If the IPC pipe disconnects, the Promise will
  // reject/fail, which should not be confused with a null return. In that case,
  // an undoable state may exist, but the call failed due to the broken pipe.
  Undo() => (ComposeState? last_state);

  // Asks the Browser to open a new tab navigated to the Compose bug report
  // Buganizer.
  OpenBugReportingLink();

  // Asks the Browser to open a new tab navigated to the Dogfood feedback
  // survey.
  OpenFeedbackSurveyLink();

  // Asks the Browser to open a new tab navigated to the Compose-related Chrome
  // settings page.
  OpenComposeSettings();

  // Asks the native handler to store the user feedback supplied by the user.
  SetUserFeedback(UserFeedback feedback);
};

// Interface for calls from Compose dialog JS into the Browser process.
interface ComposeClientPageHandler {
  // Asks the receiver to show the compose dialog.
  ShowUI();
  // Asks the receiver to close the compose dialog. `reason` describes
  // the user action that triggered the close.
  CloseUI(CloseReason reason);
  // Notifies the browser that the page content consent was approved.
  ApproveConsent();
  // Notifies the browser that the page content disclaimer was acknowledged.
  AcknowledgeConsentDisclaimer();
};

// Interface for calls from the Browser process into Compose dialog JS.
interface ComposeDialog {
  // Called when a compose request is fulfilled, either by the model execution
  // service or due to an error. Because compose requests can outlive this
  // WebUI, this is an event rather than a callback on the original `Compose`
  // call above.
  ResponseReceived(ComposeResponse response);
};
